(()=>{"use strict";var o={"./src/helpers/browserHelper.ts":
/*!**************************************!*\
  !*** ./src/helpers/browserHelper.ts ***!
  \**************************************/function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var n=Object.getOwnPropertyDescriptor(t,r);n&&("get"in n?t.__esModule:!n.writable&&!n.configurable)||(n={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,n)}:function(e,t,r,o){e[o=void 0===o?r:o]=t[r]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return n(t,e),t},s=this&&this.__awaiter||function(e,s,l,c){return new(l=l||Promise)(function(r,t){function o(e){try{i(c.next(e))}catch(e){t(e)}}function n(e){try{i(c.throw(e))}catch(e){t(e)}}function i(e){var t;e.done?r(e.value):((t=e.value)instanceof l?t:new l(function(e){e(t)})).then(o,n)}i((c=c.apply(e,s||[])).next())})},l=(Object.defineProperty(t,"__esModule",{value:!0}),t.browserHelper=t.deleteRoute=t.addRoute=t.addInitScript=t.getTab=t.closeTab=t.addTab=t.getBrowserContext=t.closeContext=t.createContext=t.closeBrowser=t.createBrowser=void 0,r(/*! playwright */"playwright"));const c=r(/*! ./globalVars */"./src/helpers/globalVars.ts"),u={chromium:l.chromium,firefox:l.firefox,webkit:l.webkit};t.createBrowser=function(){return s(this,void 0,void 0,function*(){var e=c.GlobalVars.getBrowserOptions();let t=1;for(;t<=3;)try{return yield u[c.GlobalVars.browser.name].launch(e)}catch(e){if(3===t)throw new Error(e.message);yield new Promise(e=>setTimeout(e,5e3)),t+=1}return null})},t.closeBrowser=function(e){return s(this,void 0,void 0,function*(){yield e.close()})},t.createContext=function(t){return s(this,void 0,void 0,function*(){var e=c.GlobalVars.getBrowserContextOptions();return t.newContext(e)})},t.closeContext=function(e){return s(this,void 0,void 0,function*(){yield e.close()})},t.getBrowserContext=function(e,t=-1){if(0===(e=e.contexts()).length)throw new Error("0 Context was found for this browser");if(t<-1||t>=e.length)throw new Error(`Position ${t} is wrong to get the context`);return-1===t?e[e.length-1]:e[t]},t.addTab=function(e){return s(this,void 0,void 0,function*(){return e.newPage()})},t.closeTab=function(e){return s(this,void 0,void 0,function*(){yield e.close()})},t.getTab=function(e,t=-1){if(0===(e=e.pages()).length)throw new Error("0 Page was found for this context");if(t<-1||t>=e.length)throw new Error(`Position ${t} is wrong to get the browser tab`);return-1===t?e[e.length-1]:e[t]},t.addRoute=function(e,t,r){return s(this,void 0,void 0,function*(){yield e.route(t,r)})},t.deleteRoute=function(e,t,r){return s(this,void 0,void 0,function*(){yield e.unroute(t,r)})},t.addInitScript=function(e,t,r){return s(this,void 0,void 0,function*(){yield e.addInitScript(t,r)})},t.browserHelper=i(r(/*! ./browserHelper */"./src/helpers/browserHelper.ts"))},"./src/helpers/dbHelper.ts":
/*!*********************************!*\
  !*** ./src/helpers/dbHelper.ts ***!
  \*********************************/function(e,t,r){var o=this&&this.__awaiter||function(e,s,l,c){return new(l=l||Promise)(function(r,t){function o(e){try{i(c.next(e))}catch(e){t(e)}}function n(e){try{i(c.throw(e))}catch(e){t(e)}}function i(e){var t;e.done?r(e.value):((t=e.value)instanceof l?t:new l(function(e){e(t)})).then(o,n)}i((c=c.apply(e,s||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0}),t.dbHelper=void 0;const n=r(/*! mysql2/promise */"mysql2/promise"),i=r(/*! ./globalVars */"./src/helpers/globalVars.ts");t.dbHelper=new class{createPool(e=i.GlobalVars.db){return(0,n.createPool)(e)}executeQuery(r){return o(this,void 0,void 0,function*(){const e=this.createPool();var t=yield e.execute(r);return yield this.destroyConnection(e),t})}getQueryResults(e){return o(this,void 0,void 0,function*(){return(yield this.executeQuery(e))[0]})}createCustomSelectQuery(t,e="*",r){var o=e=>`SELECT ${e} FROM ${t} ${r?"where "+r:""};`;return o("string"==typeof e?e:e.join(","))}getResultsCustomSelectQuery(e,t="*",r){return o(this,void 0,void 0,function*(){return this.getQueryResults(this.createCustomSelectQuery(e,t,r))})}getQueryFields(e){return o(this,void 0,void 0,function*(){return(yield this.executeQuery(e))[1]})}destroyConnection(e){return o(this,void 0,void 0,function*(){yield e.end()})}}},"./src/helpers/globalVars.ts":
/*!***********************************!*\
  !*** ./src/helpers/globalVars.ts ***!
  \***********************************/(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GlobalVars=void 0;const o=r(/*! dotenv */"dotenv"),n=r(/*! playwright */"playwright");(0,o.config)({path:".env"});class i{static getBrowserOptions(){if(!this.platformsList.includes(this.platform))throw new Error("The framework can't handle the platform "+this.platform);if(!this.browsersList.includes(this.browser.name))throw new Error("The framework can't handle the browser "+this.browser.name);let e;return"mobile"===this.platform||"chromium"===this.browser.name?(e=Object.assign(Object.assign({},this.browser.options),{chromiumSandbox:!1})).args.push("--disable-web-security"):e=this.browser.options,e}static getBrowserContextOptions(){let e=this.browserContext.options;var t;return"mobile"===this.platform&&(t=n.devices[this.device.name],e=Object.assign(Object.assign({},e),t)),e}}(t.GlobalVars=i).browsersList=["chromium","firefox","webkit"],i.platformsList=["desktop","mobile"],i.platform=null!=(r=process.env.PLATFORM)?r:"desktop",i.browser={name:null!=(t=process.env.BROWSER)?t:"chromium",options:{headless:!("false"===process.env.HEADLESS),timeout:0,slowMo:parseInt(null!=(r=process.env.SLOW_MO)?r:"5",10),acceptDownloads:!(null==(t=process.env.ACCEPT_DOWNLOADS)||t),args:[]}},i.browserContext={options:{viewport:{width:parseInt(null!=(r=process.env.WIDTH)?r:"1680",10),height:parseInt(null!=(t=process.env.HEIGHT)?t:"900",10)},locale:null!=(r=process.env.LOCALE)?r:"fr-FR",httpCredentials:{username:null!=(t=process.env.HTTP_CRED_USERNAME)?t:"",password:null!=(r=process.env.HTTP_CRED_PASSWORD)?r:""}}},i.device={name:process.env.DEVICE},i.url=process.env.URL,i.db={host:null!=(t=process.env.DB_HOST)?t:"localhost",user:null!=(r=process.env.DB_USER)?r:"root",password:null!=(t=process.env.DB_PASSWORD)?t:"",database:null!=(r=process.env.DB_NAME)?r:"mydatabase"},i.screenshots={active:null==(t=process.env.SCREENSHOTS_ON)||t,folder:null!=(r=process.env.SCREENSHOTS_FOLDER)?r:"./screenshots"}},"./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var n=Object.getOwnPropertyDescriptor(t,r);n&&("get"in n?t.__esModule:!n.writable&&!n.configurable)||(n={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,n)}:function(e,t,r,o){e[o=void 0===o?r:o]=t[r]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return n(t,e),t},s=(Object.defineProperty(t,"__esModule",{value:!0}),t.mochaHooks=t.CommonPage=t.browserHelper=t.deleteRoute=t.addRoute=t.addInitScript=t.getTab=t.closeTab=t.addTab=t.getBrowserContext=t.closeContext=t.createContext=t.closeBrowser=t.createBrowser=t.dbHelper=t.GlobalVars=void 0,r(/*! ./helpers/globalVars */"./src/helpers/globalVars.ts")),l=(Object.defineProperty(t,"GlobalVars",{enumerable:!0,get:function(){return s.GlobalVars}}),r(/*! ./helpers/dbHelper */"./src/helpers/dbHelper.ts")),c=(Object.defineProperty(t,"dbHelper",{enumerable:!0,get:function(){return l.dbHelper}}),r(/*! ./helpers/browserHelper */"./src/helpers/browserHelper.ts")),u=(Object.defineProperty(t,"createBrowser",{enumerable:!0,get:function(){return c.createBrowser}}),Object.defineProperty(t,"closeBrowser",{enumerable:!0,get:function(){return c.closeBrowser}}),Object.defineProperty(t,"createContext",{enumerable:!0,get:function(){return c.createContext}}),Object.defineProperty(t,"closeContext",{enumerable:!0,get:function(){return c.closeContext}}),Object.defineProperty(t,"getBrowserContext",{enumerable:!0,get:function(){return c.getBrowserContext}}),Object.defineProperty(t,"addTab",{enumerable:!0,get:function(){return c.addTab}}),Object.defineProperty(t,"closeTab",{enumerable:!0,get:function(){return c.closeTab}}),Object.defineProperty(t,"getTab",{enumerable:!0,get:function(){return c.getTab}}),Object.defineProperty(t,"addInitScript",{enumerable:!0,get:function(){return c.addInitScript}}),Object.defineProperty(t,"addRoute",{enumerable:!0,get:function(){return c.addRoute}}),Object.defineProperty(t,"deleteRoute",{enumerable:!0,get:function(){return c.deleteRoute}}),t.browserHelper=i(r(/*! ./helpers/browserHelper */"./src/helpers/browserHelper.ts")),r(/*! ./utils/pages/commonPage */"./src/utils/pages/commonPage.ts")),a=(Object.defineProperty(t,"CommonPage",{enumerable:!0,get:function(){return u.CommonPage}}),r(/*! ./utils/mocha/setup */"./src/utils/mocha/setup.ts"));Object.defineProperty(t,"mochaHooks",{enumerable:!0,get:function(){return a.mochaHooks}})},"./src/utils/mocha/setup.ts":
/*!**********************************!*\
  !*** ./src/utils/mocha/setup.ts ***!
  \**********************************/function(e,t,r){var o=this&&this.__awaiter||function(e,s,l,c){return new(l=l||Promise)(function(r,t){function o(e){try{i(c.next(e))}catch(e){t(e)}}function n(e){try{i(c.throw(e))}catch(e){t(e)}}function i(e){var t;e.done?r(e.value):((t=e.value)instanceof l?t:new l(function(e){e(t)})).then(o,n)}i((c=c.apply(e,s||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0}),t.mochaHooks=void 0,r(/*! module-alias/register */"module-alias/register");const n=r(/*! src/helpers/browserHelper */"./src/helpers/browserHelper.ts"),i=r(/*! src/helpers/globalVars */"./src/helpers/globalVars.ts");let s=1;t.mochaHooks={beforeAll:function(){return o(this,void 0,void 0,function*(){this.browser=yield(0,n.createBrowser)()})},afterEach:function(){var r;return o(this,void 0,void 0,function*(){if(i.GlobalVars.screenshots.active&&"failed"===(null==(r=this.currentTest)?void 0:r.state)){var e=(0,n.getBrowserContext)(this.browser);const t=(0,n.getTab)(e);yield t.screenshot({path:`${i.GlobalVars.screenshots.folder}/${s}.png`,fullPage:!0}),s++}})},afterAll:function(){return o(this,void 0,void 0,function*(){yield(0,n.closeBrowser)(this.browser)})}}},"./src/utils/pages/commonPage.ts":
/*!***************************************!*\
  !*** ./src/utils/pages/commonPage.ts ***!
  \***************************************/function(e,t){var n=this&&this.__awaiter||function(e,s,l,c){return new(l=l||Promise)(function(r,t){function o(e){try{i(c.next(e))}catch(e){t(e)}}function n(e){try{i(c.throw(e))}catch(e){t(e)}}function i(e){var t;e.done?r(e.value):((t=e.value)instanceof l?t:new l(function(e){e(t)})).then(o,n)}i((c=c.apply(e,s||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0}),t.CommonPage=void 0;t.CommonPage=class{getPageTitle(e){return n(this,void 0,void 0,function*(){return e.title()})}goTo(e,t,r="networkidle"){return n(this,void 0,void 0,function*(){yield e.goto(t,{waitUntil:r})})}getCurrentURL(e){return decodeURIComponent(e.url())}waitForTimeout(e,t=1e4){return n(this,void 0,void 0,function*(){yield e.waitForTimeout(t)})}waitForSelector(e,t,r,o=1e4){return n(this,void 0,void 0,function*(){yield e.waitForSelector(t,{state:r,timeout:o})})}waitForVisibleSelector(e,t,r=1e4){return n(this,void 0,void 0,function*(){yield this.waitForSelector(e,t,"visible",r)})}waitForHiddenSelector(e,t,r=1e4){return n(this,void 0,void 0,function*(){yield this.waitForSelector(e,t,"hidden",r)})}waitForAttachedSelector(e,t,r=1e4){return n(this,void 0,void 0,function*(){yield this.waitForSelector(e,t,"attached",r)})}waitForDetachedSelector(e,t,r=1e4){return n(this,void 0,void 0,function*(){yield this.waitForSelector(e,t,"detached",r)})}getTextContent(t,r,o=!0){return n(this,void 0,void 0,function*(){o&&(yield this.waitForVisibleSelector(t,r));const e=yield t.$eval(r,e=>e.textContent);return e?e.replace(/\s+/g," ").trim():null})}getAttributeContent(e,t,r){return n(this,void 0,void 0,function*(){return yield e.waitForSelector(t,{state:"attached"}),e.$eval(t,(e,t)=>e.getAttribute(t),r)})}elementVisible(e,t,r=10){return n(this,void 0,void 0,function*(){try{return yield this.waitForVisibleSelector(e,t,r),!0}catch(e){return!1}})}elementNotVisible(e,t,r=10){return n(this,void 0,void 0,function*(){try{return yield this.waitForHiddenSelector(e,t,r),!0}catch(e){return!1}})}openLinkWithTargetBlank(t,r,o="body .logo"){return n(this,void 0,void 0,function*(){const[e]=yield Promise.all([t.waitForEvent("popup"),t.click(r)]);return yield e.waitForLoadState("networkidle"),yield this.waitForVisibleSelector(e,o),e})}waitForSelectorAndClick(e,t,r=5e3){return n(this,void 0,void 0,function*(){yield this.waitForVisibleSelector(e,t,r),yield e.click(t)})}reloadPage(e){return n(this,void 0,void 0,function*(){yield e.reload()})}setValue(e,t,r){return n(this,void 0,void 0,function*(){yield e.fill(t,r)})}deleteTextFromInput(e,t){return n(this,void 0,void 0,function*(){yield this.waitForSelectorAndClick(e,t),yield e.click(t,{clickCount:3}),yield e.waitForTimeout(100),yield e.press(t,"Delete")})}dialogListener(e,t,r){e.once("dialog",e=>{t?""!==r?e.accept(r):e.accept():e.dismiss()})}closePage(e,t,r=-1){return n(this,void 0,void 0,function*(){return yield t.close(),-1!==r?e.pages()[r]:null})}scrollTo(e,t){return n(this,void 0,void 0,function*(){yield e.$eval(t,e=>e.scrollIntoView())})}selectByVisibleText(e,t,r,o=!1){return n(this,void 0,void 0,function*(){yield e.selectOption(t,{label:r.toString()},{force:o})})}getNumberFromText(t,r,o=0){return n(this,void 0,void 0,function*(){yield t.waitForTimeout(o);var e=yield this.getTextContent(t,r),e=/\d+/g.exec(e).toString();return parseInt(e,10)})}clickAndWaitForNavigation(e,t,r="networkidle"){return n(this,void 0,void 0,function*(){yield Promise.all([e.waitForNavigation({waitUntil:r}),e.click(t)])})}goToPreviousPage(e,t="load"){return n(this,void 0,void 0,function*(){yield e.goBack({waitUntil:t})})}isCheckboxSelected(e,t){return n(this,void 0,void 0,function*(){return e.isChecked(t)})}changeCheckboxValue(e,t,r=!0){return n(this,void 0,void 0,function*(){r?yield e.check(t):yield e.uncheck(t)})}dragAndDrop(e,t,r){return n(this,void 0,void 0,function*(){yield e.dragAndDrop(t,r)})}uploadFile(t,r,o){return n(this,void 0,void 0,function*(){const e=yield t.$(r);yield e.setInputFiles(o)})}uploadOnFileChooser(e,t,r){return n(this,void 0,void 0,function*(){e.once("filechooser",e=>{e.setFiles(r)}),yield e.click(t)})}getParentElement(e,t){return e.evaluateHandle(e=>document.querySelector(e).parentElement,t)}clickAndWaitForDownload(t,r,o=!1){return n(this,void 0,void 0,function*(){o&&(yield t.$eval(r,e=>e.target=""));const[e]=yield Promise.all([t.waitForEvent("download"),t.click(r)]);return e.path()})}getBoundingClientRect(e,t){return e.evaluate(e=>{return null==(e=document.querySelector(e))?void 0:e.getBoundingClientRect().toJSON()},t)}getDocumentClientSize(e){return e.evaluate(()=>({vw:Math.max(document.documentElement.clientWidth||0,window.innerWidth||0),vh:Math.max(document.documentElement.clientHeight||0,window.innerHeight||0)}))}isElementVisibleAfterScroll(r,o){return n(this,void 0,void 0,function*(){var e,t=yield this.getBoundingClientRect(r,o);return 0<=t.top&&0<=t.left&&(e=yield this.getDocumentClientSize(r),t.right<=e.vw&&t.bottom<=e.vh)})}}},dotenv:
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/e=>{e.exports=require("dotenv")},"module-alias/register":
/*!****************************************!*\
  !*** external "module-alias/register" ***!
  \****************************************/e=>{e.exports=require("module-alias/register")},"mysql2/promise":
/*!*********************************!*\
  !*** external "mysql2/promise" ***!
  \*********************************/e=>{e.exports=require("mysql2/promise")},playwright:
/*!*****************************!*\
  !*** external "playwright" ***!
  \*****************************/e=>{e.exports=require("playwright")}},n={};(function e(t){var r=n[t];if(void 0!==r)return r.exports;r=n[t]={exports:{}};return o[t].call(r.exports,r,r.exports,e),r.exports})("./src/index.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFBc0JsRyxHQUMvQytHLEVBQUtHLE9BQVNKLEVBQWFYLElBQU1ZLEVBQUtJLFFBQVVMLEVBQWFKLFM7OztpQ0NwZXBGVSxFQUFPdFEsUUFBVXVRLFFBQVEsVzs7O2dEQ0F6QkQsRUFBT3RRLFFBQVV1USxRQUFRLDBCOzs7eUNDQXpCRCxFQUFPdFEsUUFBVXVRLFFBQVEsbUI7OztxQ0NBekJELEVBQU90USxRQUFVdVEsUUFBUSxnQkNDckJDLEVBQTJCLElBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUI3UyxJQUFqQjhTLEVBQ0gsT0FBT0EsRUFBYTNRLFFBR2pCc1EsRUFBU0UsRUFBeUJFLEdBQVksQ0FHakQxUSxRQUFTLElBT1YsT0FIQTRRLEVBQW9CRixHQUFVNVIsS0FBS3dSLEVBQU90USxRQUFTc1EsRUFBUUEsRUFBT3RRLFFBQVN5USxHQUdwRUgsRUFBT3RRLFNDbEJXeVEsQ0FBb0IsbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVzdGFzaG9wX2NvcnBfdGVzdHNfYmFzZV9mcmFtZXdvcmsvLi9zcmMvaGVscGVycy9icm93c2VySGVscGVyLnRzIiwid2VicGFjazovL3ByZXN0YXNob3BfY29ycF90ZXN0c19iYXNlX2ZyYW1ld29yay8uL3NyYy9oZWxwZXJzL2RiSGVscGVyLnRzIiwid2VicGFjazovL3ByZXN0YXNob3BfY29ycF90ZXN0c19iYXNlX2ZyYW1ld29yay8uL3NyYy9oZWxwZXJzL2dsb2JhbFZhcnMudHMiLCJ3ZWJwYWNrOi8vcHJlc3Rhc2hvcF9jb3JwX3Rlc3RzX2Jhc2VfZnJhbWV3b3JrLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL3ByZXN0YXNob3BfY29ycF90ZXN0c19iYXNlX2ZyYW1ld29yay8uL3NyYy91dGlscy9tb2NoYS9zZXR1cC50cyIsIndlYnBhY2s6Ly9wcmVzdGFzaG9wX2NvcnBfdGVzdHNfYmFzZV9mcmFtZXdvcmsvLi9zcmMvdXRpbHMvcGFnZXMvY29tbW9uUGFnZS50cyIsIndlYnBhY2s6Ly9wcmVzdGFzaG9wX2NvcnBfdGVzdHNfYmFzZV9mcmFtZXdvcmsvZXh0ZXJuYWwgY29tbW9uanMgXCJkb3RlbnZcIiIsIndlYnBhY2s6Ly9wcmVzdGFzaG9wX2NvcnBfdGVzdHNfYmFzZV9mcmFtZXdvcmsvZXh0ZXJuYWwgY29tbW9uanMgXCJtb2R1bGUtYWxpYXMvcmVnaXN0ZXJcIiIsIndlYnBhY2s6Ly9wcmVzdGFzaG9wX2NvcnBfdGVzdHNfYmFzZV9mcmFtZXdvcmsvZXh0ZXJuYWwgY29tbW9uanMgXCJteXNxbDIvcHJvbWlzZVwiIiwid2VicGFjazovL3ByZXN0YXNob3BfY29ycF90ZXN0c19iYXNlX2ZyYW1ld29yay9leHRlcm5hbCBjb21tb25qcyBcInBsYXl3cmlnaHRcIiIsIndlYnBhY2s6Ly9wcmVzdGFzaG9wX2NvcnBfdGVzdHNfYmFzZV9mcmFtZXdvcmsvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcHJlc3Rhc2hvcF9jb3JwX3Rlc3RzX2Jhc2VfZnJhbWV3b3JrL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJyb3dzZXJIZWxwZXIgPSBleHBvcnRzLmRlbGV0ZVJvdXRlID0gZXhwb3J0cy5hZGRSb3V0ZSA9IGV4cG9ydHMuYWRkSW5pdFNjcmlwdCA9IGV4cG9ydHMuZ2V0VGFiID0gZXhwb3J0cy5jbG9zZVRhYiA9IGV4cG9ydHMuYWRkVGFiID0gZXhwb3J0cy5nZXRCcm93c2VyQ29udGV4dCA9IGV4cG9ydHMuY2xvc2VDb250ZXh0ID0gZXhwb3J0cy5jcmVhdGVDb250ZXh0ID0gZXhwb3J0cy5jbG9zZUJyb3dzZXIgPSBleHBvcnRzLmNyZWF0ZUJyb3dzZXIgPSB2b2lkIDA7XG5jb25zdCBwbGF5d3JpZ2h0XzEgPSByZXF1aXJlKFwicGxheXdyaWdodFwiKTtcbmNvbnN0IGdsb2JhbFZhcnNfMSA9IHJlcXVpcmUoXCIuL2dsb2JhbFZhcnNcIik7XG5jb25zdCBwbGF5d3JpZ2h0ID0geyBjaHJvbWl1bTogcGxheXdyaWdodF8xLmNocm9taXVtLCBmaXJlZm94OiBwbGF5d3JpZ2h0XzEuZmlyZWZveCwgd2Via2l0OiBwbGF5d3JpZ2h0XzEud2Via2l0IH07XG4vKiBCcm93c2VyIGZ1bmN0aW9ucyovXG4vKipcbiAqIENyZWF0ZSBicm93c2VyIHdpdGggb3B0aW9uc1xuICogQHJldHVybnMge1Byb21pc2U8QnJvd3NlcnxudWxsPn1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnJvd3NlcigpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAvLyBHZXQgYnJvd3NlciBvcHRpb25zXG4gICAgICAgIGNvbnN0IGJyb3dzZXJPcHRpb25zID0gZ2xvYmFsVmFyc18xLkdsb2JhbFZhcnMuZ2V0QnJvd3Nlck9wdGlvbnMoKTtcbiAgICAgICAgbGV0IGF0dGVtcHQgPSAxO1xuICAgICAgICAvLyBTb21ldGltZXMsIHRoZSBicm93c2VyIGNyYXNoIGluIGNyZWF0aW9uXG4gICAgICAgIC8vIFRyeWluZyB0byBjcmVhdGUgdGhlIGJyb3dzZXIgZm9yIDMgdGltZXNcbiAgICAgICAgd2hpbGUgKGF0dGVtcHQgPD0gMykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQgcGxheXdyaWdodFtnbG9iYWxWYXJzXzEuR2xvYmFsVmFycy5icm93c2VyLm5hbWVdLmxhdW5jaChicm93c2VyT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChhdHRlbXB0ID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNTAwMCkpO1xuICAgICAgICAgICAgICAgICAgICBhdHRlbXB0ICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0pO1xufVxuZXhwb3J0cy5jcmVhdGVCcm93c2VyID0gY3JlYXRlQnJvd3Nlcjtcbi8qKlxuICogQ2xvc2UgdGhlIGJyb3dzZXJcbiAqIEBwYXJhbSBicm93c2VyIHtCcm93c2VyfSBCcm93c2VyIGxhdW5jaGVkIGZvciB0ZXN0c1xuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gKi9cbmZ1bmN0aW9uIGNsb3NlQnJvd3Nlcihicm93c2VyKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgeWllbGQgYnJvd3Nlci5jbG9zZSgpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5jbG9zZUJyb3dzZXIgPSBjbG9zZUJyb3dzZXI7XG4vKiBDb250ZXh0IGZ1bmN0aW9ucyAqL1xuLyoqXG4gKiBDcmVhdGUgYnJvd3NlciBjb250ZXh0IHdpdGggdmlld3BvcnQgYW5kIGxhbmd1YWdlXG4gKiBAcGFyYW0gYnJvd3NlciB7QnJvd3Nlcn0gQnJvd3NlciBjcmVhdGVkIHdpdGggZnVuY3Rpb24gYWJvdmVcbiAqIEByZXR1cm5zIHtQcm9taXNlPEJyb3dzZXJDb250ZXh0Pn1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ29udGV4dChicm93c2VyKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgY29udGV4dE9wdGlvbnMgPSBnbG9iYWxWYXJzXzEuR2xvYmFsVmFycy5nZXRCcm93c2VyQ29udGV4dE9wdGlvbnMoKTtcbiAgICAgICAgcmV0dXJuIGJyb3dzZXIubmV3Q29udGV4dChjb250ZXh0T3B0aW9ucyk7XG4gICAgfSk7XG59XG5leHBvcnRzLmNyZWF0ZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0O1xuLyoqXG4gKiBDbG9zZSBicm93c2VyIGNvbnRleHRcbiAqIEBwYXJhbSBjb250ZXh0IHtCcm93c2VyQ29udGV4dH0gQnJvd3NlciBjb250ZXh0IGNyZWF0ZWQgYWJvdmVcbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICovXG5mdW5jdGlvbiBjbG9zZUNvbnRleHQoY29udGV4dCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHlpZWxkIGNvbnRleHQuY2xvc2UoKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuY2xvc2VDb250ZXh0ID0gY2xvc2VDb250ZXh0O1xuLyoqXG4gKiBHZXQgYnJvd3NlciBjb250ZXh0IGJ5IHBvc2l0aW9uXG4gKiBAcGFyYW0gYnJvd3NlciB7QnJvd3Nlcn0gQnJvd3NlciBsYXVuY2hlZCBmb3IgdGVzdHNcbiAqIEBwYXJhbSBwb3NpdGlvbiB7bnVtYmVyfSBQb3NpdGlvbiBvZiB0aGUgY29udGV4dCAoLTEgZm9yIHRoZSBsYXN0IGNvbnRleHQpXG4gKiBAcmV0dXJucyB7QnJvd3NlckNvbnRleHR9XG4gKi9cbmZ1bmN0aW9uIGdldEJyb3dzZXJDb250ZXh0KGJyb3dzZXIsIHBvc2l0aW9uID0gLTEpIHtcbiAgICBjb25zdCBjb250ZXh0cyA9IGJyb3dzZXIuY29udGV4dHMoKTtcbiAgICBpZiAoY29udGV4dHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignMCBDb250ZXh0IHdhcyBmb3VuZCBmb3IgdGhpcyBicm93c2VyJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHBvc2l0aW9uIDwgLTEgfHwgcG9zaXRpb24gPj0gY29udGV4dHMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUG9zaXRpb24gJHtwb3NpdGlvbn0gaXMgd3JvbmcgdG8gZ2V0IHRoZSBjb250ZXh0YCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHBvc2l0aW9uID09PSAtMSkge1xuICAgICAgICByZXR1cm4gY29udGV4dHNbY29udGV4dHMubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0c1twb3NpdGlvbl07XG59XG5leHBvcnRzLmdldEJyb3dzZXJDb250ZXh0ID0gZ2V0QnJvd3NlckNvbnRleHQ7XG4vKiBUYWIgZnVuY3Rpb25zICovXG4vKipcbiAqIEFkZCBuZXcgdGFiIG9uIHRoZSBicm93c2VyXG4gKiBAcGFyYW0gY29udGV4dCB7QnJvd3NlckNvbnRleHR9IEJyb3dzZXIgY29udGV4dCBjcmVhdGVkIGFib3ZlXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxQYWdlPn1cbiAqL1xuZnVuY3Rpb24gYWRkVGFiKGNvbnRleHQpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICByZXR1cm4gY29udGV4dC5uZXdQYWdlKCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmFkZFRhYiA9IGFkZFRhYjtcbi8qKlxuICogQ2xvc2UgYnJvd3NlciB0YWJcbiAqIEBwYXJhbSB0YWIge1BhZ2V9IEJyb3dzZXIgdGFiIGNyZWF0ZWQgYWJvdmVcbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICovXG5mdW5jdGlvbiBjbG9zZVRhYih0YWIpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB5aWVsZCB0YWIuY2xvc2UoKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuY2xvc2VUYWIgPSBjbG9zZVRhYjtcbi8qKlxuICogR2V0IEJyb3dzZXIgdGFiIGZyb20gcG9zaXRpb25cbiAqIEBwYXJhbSBjb250ZXh0IHtCcm93c2VyQ29udGV4dH0gQ29udGV4dCB0byBnZXQgdGFiIGZyb21cbiAqIEBwYXJhbSBwb3NpdGlvbiB7bnVtYmVyfSBQb3NpdGlvbiBvZiB0aGUgdGFiICgtMSBmb3IgbGFzdCB0YWIpXG4gKiBAcmV0dXJucyB7UGFnZX1cbiAqL1xuZnVuY3Rpb24gZ2V0VGFiKGNvbnRleHQsIHBvc2l0aW9uID0gLTEpIHtcbiAgICBjb25zdCB0YWJzID0gY29udGV4dC5wYWdlcygpO1xuICAgIGlmICh0YWJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJzAgUGFnZSB3YXMgZm91bmQgZm9yIHRoaXMgY29udGV4dCcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChwb3NpdGlvbiA8IC0xIHx8IHBvc2l0aW9uID49IHRhYnMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUG9zaXRpb24gJHtwb3NpdGlvbn0gaXMgd3JvbmcgdG8gZ2V0IHRoZSBicm93c2VyIHRhYmApO1xuICAgIH1cbiAgICBlbHNlIGlmIChwb3NpdGlvbiA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRhYnNbdGFicy5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIHRhYnNbcG9zaXRpb25dO1xufVxuZXhwb3J0cy5nZXRUYWIgPSBnZXRUYWI7XG4vKiBSb3V0ZXMgZnVuY3Rpb25zICovXG4vKipcbiAqIEFkZCByb3V0ZSB0byB0aGUgYnJvd3NlciB0YWIgb3IgdG8gdGhlIGJyb3dzZXIgY29udGV4dFxuICogQHBhcmFtIGJyb3dzZXJFbGVtZW50IHtQYWdlfEJyb3dzZXJDb250ZXh0fVxuICogQHBhcmFtIHVybCB7c3RyaW5nfFJlZ0V4cHxmdW5jdGlvbihVUkwpOmJvb2xlYW59XG4gKiBAcGFyYW0gaGFuZGxlciB7ZnVuY3Rpb24oUm91dGUsIFJlcXVlc3QpfVxuICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAqL1xuZnVuY3Rpb24gYWRkUm91dGUoYnJvd3NlckVsZW1lbnQsIHVybCwgaGFuZGxlcikge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHlpZWxkIGJyb3dzZXJFbGVtZW50LnJvdXRlKHVybCwgaGFuZGxlcik7XG4gICAgfSk7XG59XG5leHBvcnRzLmFkZFJvdXRlID0gYWRkUm91dGU7XG4vKipcbiAqIERlbGV0ZSByb3V0ZSB0byB0aGUgYnJvd3NlciB0YWIgb3IgdG8gdGhlIGJyb3dzZXIgY29udGV4dFxuICogQHBhcmFtIGJyb3dzZXJFbGVtZW50IHtQYWdlfEJyb3dzZXJDb250ZXh0fVxuICogQHBhcmFtIHVybCB7c3RyaW5nfFJlZ0V4cHxmdW5jdGlvbihVUkwpOmJvb2xlYW59XG4gKiBAcGFyYW0gaGFuZGxlciB7ZnVuY3Rpb24oUm91dGUsIFJlcXVlc3QpfVxuICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAqL1xuZnVuY3Rpb24gZGVsZXRlUm91dGUoYnJvd3NlckVsZW1lbnQsIHVybCwgaGFuZGxlcikge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHlpZWxkIGJyb3dzZXJFbGVtZW50LnVucm91dGUodXJsLCBoYW5kbGVyKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVsZXRlUm91dGUgPSBkZWxldGVSb3V0ZTtcbi8qKlxuICogQWRkIGluaXQgc2NyaXB0IHRvIHRoZSBicm93c2VyIHRhYiBvciB0byB0aGUgYnJvd3NlciBjb250ZXh0XG4gKiBAcGFyYW0gYnJvd3NlckVsZW1lbnQge1BhZ2V8QnJvd3NlckNvbnRleHR9XG4gKiBAcGFyYW0gc2NyaXB0IHtGdW5jdGlvbnxzdHJpbmd8e3BhdGg6ID9zdHJpbmcsIGNvbnRlbnQ6ID9zdHJpbmd9fVxuICogQHBhcmFtIGFyZ3Mge25ldmVyfVxuICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAqL1xuZnVuY3Rpb24gYWRkSW5pdFNjcmlwdChicm93c2VyRWxlbWVudCwgc2NyaXB0LCBhcmdzKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgeWllbGQgYnJvd3NlckVsZW1lbnQuYWRkSW5pdFNjcmlwdChzY3JpcHQsIGFyZ3MpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5hZGRJbml0U2NyaXB0ID0gYWRkSW5pdFNjcmlwdDtcbmV4cG9ydHMuYnJvd3NlckhlbHBlciA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9icm93c2VySGVscGVyXCIpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRiSGVscGVyID0gdm9pZCAwO1xuY29uc3QgcHJvbWlzZV8xID0gcmVxdWlyZShcIm15c3FsMi9wcm9taXNlXCIpO1xuY29uc3QgZ2xvYmFsVmFyc18xID0gcmVxdWlyZShcIi4vZ2xvYmFsVmFyc1wiKTtcbmNsYXNzIERiSGVscGVyIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBwb29sXG4gICAgICogQHBhcmFtIGRiXG4gICAgICogQHJldHVybnMge1Bvb2x9XG4gICAgICovXG4gICAgY3JlYXRlUG9vbChkYiA9IGdsb2JhbFZhcnNfMS5HbG9iYWxWYXJzLmRiKSB7XG4gICAgICAgIHJldHVybiAoMCwgcHJvbWlzZV8xLmNyZWF0ZVBvb2wpKGRiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSBhbiBzcWwgcXVlcnlcbiAgICAgKiBAcGFyYW0gcXVlcnkge3N0cmluZ30gUXVlcnkgdG8gZXhlY3V0ZVxuICAgICAqIEByZXR1cm5zIHtRdWVyeX1cbiAgICAgKi9cbiAgICBleGVjdXRlUXVlcnkocXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSB0aGlzLmNyZWF0ZVBvb2woKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSB5aWVsZCBjb25uZWN0aW9uLmV4ZWN1dGUocXVlcnkpO1xuICAgICAgICAgICAgeWllbGQgdGhpcy5kZXN0cm95Q29ubmVjdGlvbihjb25uZWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHF1ZXJ5IHJlc3VsdHNcbiAgICAgKiBAcGFyYW0gcXVlcnkge3N0cmluZ30gUXVlcnkgdG8gZXhlY3V0ZVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5PE9iamVjdD4+fVxuICAgICAqL1xuICAgIGdldFF1ZXJ5UmVzdWx0cyhxdWVyeSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuICh5aWVsZCB0aGlzLmV4ZWN1dGVRdWVyeShxdWVyeSkpWzBdO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY3VzdG9tICdTRUxFQ1QnIHF1ZXJ5XG4gICAgICogQHBhcmFtIHRhYmxlIHtzdHJpbmd9IE5hbWUgb2YgdGhlIHRhYmxlXG4gICAgICogQHBhcmFtIGZpZWxkcyB7c3RyaW5nfEFycmF5PHN0cmluZz59IEZpZWxkcyB0byBhZGQgdG8gdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0gY29uZGl0aW9ucyB7P3N0cmluZ30gRmllbGRzIHRvIGFkZCB0byB0aGUgcmVxdWVzdFxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgKi9cbiAgICBjcmVhdGVDdXN0b21TZWxlY3RRdWVyeSh0YWJsZSwgZmllbGRzID0gJyonLCBjb25kaXRpb25zKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gKGN1c3RvbUZpZWxkcykgPT4gYFNFTEVDVCAke2N1c3RvbUZpZWxkc30gRlJPTSAke3RhYmxlfSAkeyFjb25kaXRpb25zID8gJycgOiBgd2hlcmUgJHtjb25kaXRpb25zfWB9O2A7XG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5KGZpZWxkcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHF1ZXJ5KGZpZWxkcy5qb2luKCcsJykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGEgY3VzdG9tICdTRUxFQ1QnIHF1ZXJ5XG4gICAgICogQHBhcmFtIHRhYmxlIHtzdHJpbmd9IE5hbWUgb2YgdGhlIHRhYmxlXG4gICAgICogQHBhcmFtIGZpZWxkcyB7c3RyaW5nfEFycmF5PHN0cmluZz59IEZpZWxkcyB0byBhZGQgdG8gdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0gY29uZGl0aW9ucyB7P3N0cmluZ30gRmllbGRzIHRvIGFkZCB0byB0aGUgcmVxdWVzdFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk8T2JqZWN0Pj59XG4gICAgICovXG4gICAgZ2V0UmVzdWx0c0N1c3RvbVNlbGVjdFF1ZXJ5KHRhYmxlLCBmaWVsZHMgPSAnKicsIGNvbmRpdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFF1ZXJ5UmVzdWx0cyh0aGlzLmNyZWF0ZUN1c3RvbVNlbGVjdFF1ZXJ5KHRhYmxlLCBmaWVsZHMsIGNvbmRpdGlvbnMpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBxdWVyeSBmaWVsZHNcbiAgICAgKiBAcGFyYW0gcXVlcnkge3N0cmluZ30gUXVlcnkgdG8gZXhlY3V0ZVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5PE9iamVjdD4+fVxuICAgICAqL1xuICAgIGdldFF1ZXJ5RmllbGRzKHF1ZXJ5KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gKHlpZWxkIHRoaXMuZXhlY3V0ZVF1ZXJ5KHF1ZXJ5KSlbMV07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IHNxbCBjb25uZWN0aW9uXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICAgKi9cbiAgICBkZXN0cm95Q29ubmVjdGlvbihjb25uZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCBjb25uZWN0aW9uLmVuZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLmRiSGVscGVyID0gbmV3IERiSGVscGVyKCk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2wsIF9tLCBfbywgX3AsIF9xO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HbG9iYWxWYXJzID0gdm9pZCAwO1xuY29uc3QgZG90ZW52XzEgPSByZXF1aXJlKFwiZG90ZW52XCIpO1xuY29uc3QgcGxheXdyaWdodF8xID0gcmVxdWlyZShcInBsYXl3cmlnaHRcIik7XG4oMCwgZG90ZW52XzEuY29uZmlnKSh7IHBhdGg6ICcuZW52JyB9KTtcbmNsYXNzIEdsb2JhbFZhcnMge1xuICAgIC8qKlxuICAgICAqIEdldCBicm93c2VyIG9wdGlvbnNcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0QnJvd3Nlck9wdGlvbnMoKSB7XG4gICAgICAgIGlmICghdGhpcy5wbGF0Zm9ybXNMaXN0LmluY2x1ZGVzKHRoaXMucGxhdGZvcm0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBmcmFtZXdvcmsgY2FuJ3QgaGFuZGxlIHRoZSBwbGF0Zm9ybSAke3RoaXMucGxhdGZvcm19YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmJyb3dzZXJzTGlzdC5pbmNsdWRlcyh0aGlzLmJyb3dzZXIubmFtZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGZyYW1ld29yayBjYW4ndCBoYW5kbGUgdGhlIGJyb3dzZXIgJHt0aGlzLmJyb3dzZXIubmFtZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYnJvd3Nlck9wdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLnBsYXRmb3JtID09PSAnbW9iaWxlJyB8fCB0aGlzLmJyb3dzZXIubmFtZSA9PT0gJ2Nocm9taXVtJykge1xuICAgICAgICAgICAgYnJvd3Nlck9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuYnJvd3Nlci5vcHRpb25zKSwgeyBjaHJvbWl1bVNhbmRib3g6IGZhbHNlIH0pO1xuICAgICAgICAgICAgYnJvd3Nlck9wdGlvbnMuYXJncy5wdXNoKCctLWRpc2FibGUtd2ViLXNlY3VyaXR5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBicm93c2VyT3B0aW9ucyA9IHRoaXMuYnJvd3Nlci5vcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBicm93c2VyT3B0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IEJyb3dzZXIgY29udGV4dCBvcHRpb25zXG4gICAgICovXG4gICAgc3RhdGljIGdldEJyb3dzZXJDb250ZXh0T3B0aW9ucygpIHtcbiAgICAgICAgbGV0IGNvbnRleHRPcHRpb25zID0gdGhpcy5icm93c2VyQ29udGV4dC5vcHRpb25zO1xuICAgICAgICBpZiAodGhpcy5wbGF0Zm9ybSA9PT0gJ21vYmlsZScpIHtcbiAgICAgICAgICAgIGNvbnN0IGRldmljZSA9IHBsYXl3cmlnaHRfMS5kZXZpY2VzW3RoaXMuZGV2aWNlLm5hbWVdO1xuICAgICAgICAgICAgY29udGV4dE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvbnRleHRPcHRpb25zKSwgZGV2aWNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dE9wdGlvbnM7XG4gICAgfVxufVxuZXhwb3J0cy5HbG9iYWxWYXJzID0gR2xvYmFsVmFycztcbkdsb2JhbFZhcnMuYnJvd3NlcnNMaXN0ID0gWydjaHJvbWl1bScsICdmaXJlZm94JywgJ3dlYmtpdCddO1xuR2xvYmFsVmFycy5wbGF0Zm9ybXNMaXN0ID0gWydkZXNrdG9wJywgJ21vYmlsZSddO1xuLyogQnJvd3NlciB2YXJzIGFuZCBmdW5jdGlvbnMgKi9cbkdsb2JhbFZhcnMucGxhdGZvcm0gPSAoX2EgPSBwcm9jZXNzLmVudi5QTEFURk9STSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ2Rlc2t0b3AnO1xuR2xvYmFsVmFycy5icm93c2VyID0ge1xuICAgIG5hbWU6ICgoX2IgPSBwcm9jZXNzLmVudi5CUk9XU0VSKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnY2hyb21pdW0nKSxcbiAgICAvLyBEZWZpbmUgYnJvd3NlciBvcHRpb25zXG4gICAgb3B0aW9uczoge1xuICAgICAgICBoZWFkbGVzczogIShwcm9jZXNzLmVudi5IRUFETEVTUyA9PT0gJ2ZhbHNlJyksXG4gICAgICAgIHRpbWVvdXQ6IDAsXG4gICAgICAgIHNsb3dNbzogcGFyc2VJbnQoKF9jID0gcHJvY2Vzcy5lbnYuU0xPV19NTykgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogJzUnLCAxMCksXG4gICAgICAgIGFjY2VwdERvd25sb2FkczogISgoX2QgPSBwcm9jZXNzLmVudi5BQ0NFUFRfRE9XTkxPQURTKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAndHJ1ZScpLFxuICAgICAgICBhcmdzOiBbXVxuICAgIH1cbn07XG4vKiBCcm93c2VyIGNvbnRleHQgdmFycyBhbmQgZnVuY3Rpb25zICovXG5HbG9iYWxWYXJzLmJyb3dzZXJDb250ZXh0ID0ge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgICAgdmlld3BvcnQ6IHtcbiAgICAgICAgICAgIHdpZHRoOiBwYXJzZUludCgoX2UgPSBwcm9jZXNzLmVudi5XSURUSCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogJzE2ODAnLCAxMCksXG4gICAgICAgICAgICBoZWlnaHQ6IHBhcnNlSW50KChfZiA9IHByb2Nlc3MuZW52LkhFSUdIVCkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogJzkwMCcsIDEwKVxuICAgICAgICB9LFxuICAgICAgICBsb2NhbGU6IChfZyA9IHByb2Nlc3MuZW52LkxPQ0FMRSkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogJ2ZyLUZSJyxcbiAgICAgICAgaHR0cENyZWRlbnRpYWxzOiB7XG4gICAgICAgICAgICB1c2VybmFtZTogKF9oID0gcHJvY2Vzcy5lbnYuSFRUUF9DUkVEX1VTRVJOQU1FKSAhPT0gbnVsbCAmJiBfaCAhPT0gdm9pZCAwID8gX2ggOiAnJyxcbiAgICAgICAgICAgIHBhc3N3b3JkOiAoX2ogPSBwcm9jZXNzLmVudi5IVFRQX0NSRURfUEFTU1dPUkQpICE9PSBudWxsICYmIF9qICE9PSB2b2lkIDAgPyBfaiA6ICcnXG4gICAgICAgIH1cbiAgICB9XG59O1xuR2xvYmFsVmFycy5kZXZpY2UgPSB7XG4gICAgbmFtZTogcHJvY2Vzcy5lbnYuREVWSUNFXG59O1xuLyogVXJsIHZhcnMgYW5kIGZ1bmN0aW9ucyAqL1xuR2xvYmFsVmFycy51cmwgPSBwcm9jZXNzLmVudi5VUkw7XG4vKiBEQiBoZWxwZXIgdmFycyBhbmQgZnVuY3Rpb25zICovXG5HbG9iYWxWYXJzLmRiID0ge1xuICAgIGhvc3Q6IChfayA9IHByb2Nlc3MuZW52LkRCX0hPU1QpICE9PSBudWxsICYmIF9rICE9PSB2b2lkIDAgPyBfayA6ICdsb2NhbGhvc3QnLFxuICAgIHVzZXI6IChfbCA9IHByb2Nlc3MuZW52LkRCX1VTRVIpICE9PSBudWxsICYmIF9sICE9PSB2b2lkIDAgPyBfbCA6ICdyb290JyxcbiAgICBwYXNzd29yZDogKF9tID0gcHJvY2Vzcy5lbnYuREJfUEFTU1dPUkQpICE9PSBudWxsICYmIF9tICE9PSB2b2lkIDAgPyBfbSA6ICcnLFxuICAgIGRhdGFiYXNlOiAoX28gPSBwcm9jZXNzLmVudi5EQl9OQU1FKSAhPT0gbnVsbCAmJiBfbyAhPT0gdm9pZCAwID8gX28gOiAnbXlkYXRhYmFzZSdcbn07XG4vKiBTY3JlZW5zaG90cyBhY3RpdmF0aW9uICovXG5HbG9iYWxWYXJzLnNjcmVlbnNob3RzID0ge1xuICAgIGFjdGl2ZTogKF9wID0gcHJvY2Vzcy5lbnYuU0NSRUVOU0hPVFNfT04pICE9PSBudWxsICYmIF9wICE9PSB2b2lkIDAgPyBfcCA6IHRydWUsXG4gICAgZm9sZGVyOiAoX3EgPSBwcm9jZXNzLmVudi5TQ1JFRU5TSE9UU19GT0xERVIpICE9PSBudWxsICYmIF9xICE9PSB2b2lkIDAgPyBfcSA6ICcuL3NjcmVlbnNob3RzJ1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1vY2hhSG9va3MgPSBleHBvcnRzLkNvbW1vblBhZ2UgPSBleHBvcnRzLmJyb3dzZXJIZWxwZXIgPSBleHBvcnRzLmRlbGV0ZVJvdXRlID0gZXhwb3J0cy5hZGRSb3V0ZSA9IGV4cG9ydHMuYWRkSW5pdFNjcmlwdCA9IGV4cG9ydHMuZ2V0VGFiID0gZXhwb3J0cy5jbG9zZVRhYiA9IGV4cG9ydHMuYWRkVGFiID0gZXhwb3J0cy5nZXRCcm93c2VyQ29udGV4dCA9IGV4cG9ydHMuY2xvc2VDb250ZXh0ID0gZXhwb3J0cy5jcmVhdGVDb250ZXh0ID0gZXhwb3J0cy5jbG9zZUJyb3dzZXIgPSBleHBvcnRzLmNyZWF0ZUJyb3dzZXIgPSBleHBvcnRzLmRiSGVscGVyID0gZXhwb3J0cy5HbG9iYWxWYXJzID0gdm9pZCAwO1xuLy8gRXhwb3J0IGhlbHBlcnNcbi8qIEV4cG9ydCBHbG9iYWxWYXJzICovXG52YXIgZ2xvYmFsVmFyc18xID0gcmVxdWlyZShcIi4vaGVscGVycy9nbG9iYWxWYXJzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR2xvYmFsVmFyc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2xvYmFsVmFyc18xLkdsb2JhbFZhcnM7IH0gfSk7XG4vKiBFeHBvcnQgRGIgaGVscGVyICovXG52YXIgZGJIZWxwZXJfMSA9IHJlcXVpcmUoXCIuL2hlbHBlcnMvZGJIZWxwZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkYkhlbHBlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGJIZWxwZXJfMS5kYkhlbHBlcjsgfSB9KTtcbi8qIEV4cG9ydCBCcm93c2VyIGhlbHBlciAqL1xudmFyIGJyb3dzZXJIZWxwZXJfMSA9IHJlcXVpcmUoXCIuL2hlbHBlcnMvYnJvd3NlckhlbHBlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZUJyb3dzZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJyb3dzZXJIZWxwZXJfMS5jcmVhdGVCcm93c2VyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2xvc2VCcm93c2VyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBicm93c2VySGVscGVyXzEuY2xvc2VCcm93c2VyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlQ29udGV4dFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnJvd3NlckhlbHBlcl8xLmNyZWF0ZUNvbnRleHQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbG9zZUNvbnRleHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJyb3dzZXJIZWxwZXJfMS5jbG9zZUNvbnRleHQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRCcm93c2VyQ29udGV4dFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnJvd3NlckhlbHBlcl8xLmdldEJyb3dzZXJDb250ZXh0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWRkVGFiXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBicm93c2VySGVscGVyXzEuYWRkVGFiOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2xvc2VUYWJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJyb3dzZXJIZWxwZXJfMS5jbG9zZVRhYjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFRhYlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnJvd3NlckhlbHBlcl8xLmdldFRhYjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFkZEluaXRTY3JpcHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJyb3dzZXJIZWxwZXJfMS5hZGRJbml0U2NyaXB0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWRkUm91dGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJyb3dzZXJIZWxwZXJfMS5hZGRSb3V0ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlbGV0ZVJvdXRlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBicm93c2VySGVscGVyXzEuZGVsZXRlUm91dGU7IH0gfSk7XG5leHBvcnRzLmJyb3dzZXJIZWxwZXIgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9icm93c2VySGVscGVyXCIpKTtcbi8vIEV4cG9ydCB1dGlsc1xuLyogRXhwb3J0IENvbW1vbiBwYWdlICovXG52YXIgY29tbW9uUGFnZV8xID0gcmVxdWlyZShcIi4vdXRpbHMvcGFnZXMvY29tbW9uUGFnZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbW1vblBhZ2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbW1vblBhZ2VfMS5Db21tb25QYWdlOyB9IH0pO1xuLyogRXhwb3J0IE1vY2hhIGhvb2tzICovXG52YXIgc2V0dXBfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL21vY2hhL3NldHVwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibW9jaGFIb29rc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2V0dXBfMS5tb2NoYUhvb2tzOyB9IH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubW9jaGFIb29rcyA9IHZvaWQgMDtcbnJlcXVpcmUoXCJtb2R1bGUtYWxpYXMvcmVnaXN0ZXJcIik7XG5jb25zdCBicm93c2VySGVscGVyXzEgPSByZXF1aXJlKFwic3JjL2hlbHBlcnMvYnJvd3NlckhlbHBlclwiKTtcbmNvbnN0IGdsb2JhbFZhcnNfMSA9IHJlcXVpcmUoXCJzcmMvaGVscGVycy9nbG9iYWxWYXJzXCIpO1xubGV0IGZhaWxQb3NpdGlvbiA9IDE7XG5leHBvcnRzLm1vY2hhSG9va3MgPSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHVuaXF1ZSBicm93c2VyIGZvciBhbGwgbW9jaGEgcnVuXG4gICAgICovXG4gICAgYmVmb3JlQWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLmJyb3dzZXIgPSB5aWVsZCAoMCwgYnJvd3NlckhlbHBlcl8xLmNyZWF0ZUJyb3dzZXIpKCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogVGFrZSBzY3JlZW5zaG90IGFmdGVyIGZhaWxcbiAgICAgKi9cbiAgICBhZnRlckVhY2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKGdsb2JhbFZhcnNfMS5HbG9iYWxWYXJzLnNjcmVlbnNob3RzLmFjdGl2ZSAmJlxuICAgICAgICAgICAgICAgICgoX2EgPSB0aGlzLmN1cnJlbnRUZXN0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3RhdGUpID09PSAnZmFpbGVkJykge1xuICAgICAgICAgICAgICAgIC8vIEdldCBsYXN0IGNvbnRleHQgdXNlZFxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSAoMCwgYnJvd3NlckhlbHBlcl8xLmdldEJyb3dzZXJDb250ZXh0KSh0aGlzLmJyb3dzZXIpO1xuICAgICAgICAgICAgICAgIC8vIEdldCBsYXN0IHVzZWQgdGFiXG4gICAgICAgICAgICAgICAgY29uc3QgcGFnZSA9ICgwLCBicm93c2VySGVscGVyXzEuZ2V0VGFiKShjb250ZXh0KTtcbiAgICAgICAgICAgICAgICB5aWVsZCBwYWdlLnNjcmVlbnNob3Qoe1xuICAgICAgICAgICAgICAgICAgICBwYXRoOiBgJHtnbG9iYWxWYXJzXzEuR2xvYmFsVmFycy5zY3JlZW5zaG90cy5mb2xkZXJ9LyR7ZmFpbFBvc2l0aW9ufS5wbmdgLFxuICAgICAgICAgICAgICAgICAgICBmdWxsUGFnZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGZhaWxQb3NpdGlvbisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIENsb3NlIGJyb3dzZXIgYWZ0ZXIgZmluaXNoIHRoZSBydW5cbiAgICAgKi9cbiAgICBhZnRlckFsbDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgKDAsIGJyb3dzZXJIZWxwZXJfMS5jbG9zZUJyb3dzZXIpKHRoaXMuYnJvd3Nlcik7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db21tb25QYWdlID0gdm9pZCAwO1xuLyoqXG4gKiBQYXJlbnQgcGFnZTogUGFnZSwgY29udGFpbnMgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgaW4gZXZlcnkgcGFnZSAoQk8sIEZPIC4uLilcbiAqIEBjbGFzc1xuICovXG5jbGFzcyBDb21tb25QYWdlIHtcbiAgICAvKipcbiAgICAgKiBHZXQgcGFnZSB0aXRsZVxuICAgICAqIEBwYXJhbSBwYWdlIHtQYWdlfSBCcm93c2VyIHRhYlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gICAgICovXG4gICAgZ2V0UGFnZVRpdGxlKHBhZ2UpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiBwYWdlLnRpdGxlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHbyB0byBVUkxcbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFVybCB0byBnbyB0b1xuICAgICAqIEBwYXJhbSB3YWl0VW50aWwgeyduZXR3b3JraWRsZScgfCAnbG9hZCcgfCAnZG9tY29udGVudGxvYWRlZCcgfCB1bmRlZmluZWR9IEV2ZW50IHRvIHdhaXQgZm9yXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgZ29UbyhwYWdlLCB1cmwsIHdhaXRVbnRpbCA9ICduZXR3b3JraWRsZScpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHBhZ2UuZ290byh1cmwsIHsgd2FpdFVudGlsIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGN1cnJlbnQgdXJsXG4gICAgICogQHBhcmFtIHBhZ2Uge1BhZ2V9IEJyb3dzZXIgdGFiXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRDdXJyZW50VVJMKHBhZ2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChwYWdlLnVybCgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2FpdCBmb3IgdGltZW91dCB0byBzbGVlcCBhIGJyb3dzaW5nXG4gICAgICogQHBhcmFtIHBhZ2Uge1BhZ2V9IEJyb3dzZXIgdGFiXG4gICAgICogQHBhcmFtIHRpbWVvdXQge251bWJlcn0gVGltZSB0byB3YWl0IG9uIG1pbGxpc2Vjb25kcyBiZWZvcmUgdGhyb3dpbmcgYW4gZXJyb3JcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICAgKi9cbiAgICB3YWl0Rm9yVGltZW91dChwYWdlLCB0aW1lb3V0ID0gMTAwMDApIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHBhZ2Uud2FpdEZvclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXYWl0IGZvciBzZWxlY3RvciB0byBoYXZlIGEgc3RhdGVcbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3Ige3N0cmluZ30gc2VsZWN0b3IgdG8gd2FpdFxuICAgICAqIEBwYXJhbSBzdGF0ZSB7J2F0dGFjaGVkJyB8ICdkZXRhY2hlZCcgfCAndmlzaWJsZScgfCAnaGlkZGVuJyB8IHVuZGVmaW5lZH0gU2VsZWN0b3Igc3RhdGVcbiAgICAgKiBAcGFyYW0gdGltZW91dCB7bnVtYmVyfSBUaW1lIHRvIHdhaXQgb24gbWlsbGlzZWNvbmRzIGJlZm9yZSB0aHJvd2luZyBhbiBlcnJvclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIHdhaXRGb3JTZWxlY3RvcihwYWdlLCBzZWxlY3Rvciwgc3RhdGUsIHRpbWVvdXQgPSAxMDAwMCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgcGFnZS53YWl0Rm9yU2VsZWN0b3Ioc2VsZWN0b3IsIHsgc3RhdGUsIHRpbWVvdXQgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXYWl0IGZvciBzZWxlY3RvciB0byBiZSB2aXNpYmxlXG4gICAgICogQHBhcmFtIHBhZ2Uge1BhZ2V9IEJyb3dzZXIgdGFiXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIHtzdHJpbmd9IHNlbGVjdG9yIHRvIHdhaXRcbiAgICAgKiBAcGFyYW0gdGltZW91dCB7bnVtYmVyfSBUaW1lIHRvIHdhaXQgb24gbWlsbGlzZWNvbmRzIGJlZm9yZSB0aHJvd2luZyBhbiBlcnJvclxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgd2FpdEZvclZpc2libGVTZWxlY3RvcihwYWdlLCBzZWxlY3RvciwgdGltZW91dCA9IDEwMDAwKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLndhaXRGb3JTZWxlY3RvcihwYWdlLCBzZWxlY3RvciwgJ3Zpc2libGUnLCB0aW1lb3V0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdhaXQgZm9yIHNlbGVjdG9yIHRvIGJlIHZpc2libGVcbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3Ige3N0cmluZ30gc2VsZWN0b3IgdG8gd2FpdFxuICAgICAqIEBwYXJhbSB0aW1lb3V0IHtudW1iZXJ9IFRpbWUgdG8gd2FpdCBvbiBtaWxsaXNlY29uZHMgYmVmb3JlIHRocm93aW5nIGFuIGVycm9yXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICAgKi9cbiAgICB3YWl0Rm9ySGlkZGVuU2VsZWN0b3IocGFnZSwgc2VsZWN0b3IsIHRpbWVvdXQgPSAxMDAwMCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgdGhpcy53YWl0Rm9yU2VsZWN0b3IocGFnZSwgc2VsZWN0b3IsICdoaWRkZW4nLCB0aW1lb3V0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdhaXQgZm9yIHNlbGVjdG9yIHRvIGJlIGF0dGFjaGVkXG4gICAgICogQHBhcmFtIHBhZ2Uge1BhZ2V9IEJyb3dzZXIgdGFiXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIHtzdHJpbmd9IHNlbGVjdG9yIHRvIHdhaXRcbiAgICAgKiBAcGFyYW0gdGltZW91dCB7bnVtYmVyfSBUaW1lIHRvIHdhaXQgb24gbWlsbGlzZWNvbmRzIGJlZm9yZSB0aHJvd2luZyBhbiBlcnJvclxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgd2FpdEZvckF0dGFjaGVkU2VsZWN0b3IocGFnZSwgc2VsZWN0b3IsIHRpbWVvdXQgPSAxMDAwMCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgdGhpcy53YWl0Rm9yU2VsZWN0b3IocGFnZSwgc2VsZWN0b3IsICdhdHRhY2hlZCcsIHRpbWVvdXQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2FpdCBmb3Igc2VsZWN0b3IgdG8gYmUgZGV0YWNoZWRcbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3Ige3N0cmluZ30gc2VsZWN0b3IgdG8gd2FpdFxuICAgICAqIEBwYXJhbSB0aW1lb3V0IHtudW1iZXJ9IFRpbWUgdG8gd2FpdCBvbiBtaWxsaXNlY29uZHMgYmVmb3JlIHRocm93aW5nIGFuIGVycm9yXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICAgKi9cbiAgICB3YWl0Rm9yRGV0YWNoZWRTZWxlY3RvcihwYWdlLCBzZWxlY3RvciwgdGltZW91dCA9IDEwMDAwKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLndhaXRGb3JTZWxlY3RvcihwYWdlLCBzZWxlY3RvciwgJ2RldGFjaGVkJywgdGltZW91dCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgVGV4dCBmcm9tIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3J7c3RyaW5nfSBGcm9tIHdoZXJlIHRvIGdldCB0ZXh0XG4gICAgICogQHBhcmFtIHdhaXRGb3JTZWxlY3RvciB7Ym9vbGVhbn0gVHJ1ZSB0byB3YWl0IGZvciBzZWxlY3RvciB0byBiZSB2aXNpYmxlIGJlZm9yZSBnZXR0aW5nIHRleHRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59XG4gICAgICovXG4gICAgZ2V0VGV4dENvbnRlbnQocGFnZSwgc2VsZWN0b3IsIHdhaXRGb3JTZWxlY3RvciA9IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICh3YWl0Rm9yU2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLndhaXRGb3JWaXNpYmxlU2VsZWN0b3IocGFnZSwgc2VsZWN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGV4dENvbnRlbnQgPSB5aWVsZCBwYWdlLiRldmFsKHNlbGVjdG9yLCAoZWwpID0+IGVsLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0Q29udGVudCA/IHRleHRDb250ZW50LnJlcGxhY2UoL1xccysvZywgJyAnKS50cmltKCkgOiBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGF0dHJpYnV0ZSBmcm9tIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3Ige3N0cmluZ30gU3RyaW5nIHRvIGxvY2F0ZSB0aGUgZWxlbWVudFxuICAgICAqIEBwYXJhbSBhdHRyaWJ1dGUge3N0cmluZ30gTmFtZSBvZiB0aGUgYXR0cmlidXRlIHRvIGdldFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gICAgICovXG4gICAgZ2V0QXR0cmlidXRlQ29udGVudChwYWdlLCBzZWxlY3RvciwgYXR0cmlidXRlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCBwYWdlLndhaXRGb3JTZWxlY3RvcihzZWxlY3RvciwgeyBzdGF0ZTogJ2F0dGFjaGVkJyB9KTtcbiAgICAgICAgICAgIHJldHVybiBwYWdlLiRldmFsKHNlbGVjdG9yLCAoZWwsIGF0dHIpID0+IGVsLmdldEF0dHJpYnV0ZShhdHRyKSwgYXR0cmlidXRlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElzIGVsZW1lbnQgdmlzaWJsZVxuICAgICAqIEBwYXJhbSBwYWdlIHtQYWdlfSBCcm93c2VyIHRhYlxuICAgICAqIEBwYXJhbSBzZWxlY3RvciB7c3RyaW5nfSBTdHJpbmcgdG8gbG9jYXRlIHRoZSBlbGVtZW50XG4gICAgICogQHBhcmFtIHRpbWVvdXQge251bWJlcn0gVGltZSB0byB3YWl0IG9uIG1pbGxpc2Vjb25kcyBiZWZvcmUgdGhyb3dpbmcgYW4gZXJyb3JcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gVHJ1ZSBpZiB2aXNpYmxlLCBmYWxzZSBpZiBub3RcbiAgICAgKi9cbiAgICBlbGVtZW50VmlzaWJsZShwYWdlLCBzZWxlY3RvciwgdGltZW91dCA9IDEwKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMud2FpdEZvclZpc2libGVTZWxlY3RvcihwYWdlLCBzZWxlY3RvciwgdGltZW91dCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJcyBlbGVtZW50IG5vdCB2aXNpYmxlXG4gICAgICogQHBhcmFtIHBhZ2Uge1BhZ2V9IEJyb3dzZXIgdGFiXG4gICAgICogQHBhcmFtIHNlbGVjdG9yLCBlbGVtZW50IHRvIGNoZWNrXG4gICAgICogQHBhcmFtIHRpbWVvdXQge251bWJlcn0gVGltZSB0byB3YWl0IG9uIG1pbGxpc2Vjb25kcyBiZWZvcmUgdGhyb3dpbmcgYW4gZXJyb3JcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gVHJ1ZSBpZiBub3QgdmlzaWJsZSwgZmFsc2UgaWYgdmlzaWJsZVxuICAgICAqL1xuICAgIGVsZW1lbnROb3RWaXNpYmxlKHBhZ2UsIHNlbGVjdG9yLCB0aW1lb3V0ID0gMTApIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgeWllbGQgdGhpcy53YWl0Rm9ySGlkZGVuU2VsZWN0b3IocGFnZSwgc2VsZWN0b3IsIHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3BlbiBsaW5rIGluIG5ldyBUYWIgYW5kIGdldCBvcGVuZWQgUGFnZVxuICAgICAqIEBwYXJhbSBwYWdlIHtQYWdlfSBCcm93c2VyIHRhYlxuICAgICAqIEBwYXJhbSBzZWxlY3RvciB7c3RyaW5nfSBTdHJpbmcgdG8gbG9jYXRlIHRoZSBlbGVtZW50IGZvciB0aGUgY2xpY2tcbiAgICAgKiBAcGFyYW0gbmV3UGFnZVNlbGVjdG9yIHtzdHJpbmd9IFN0cmluZyB0byBsb2NhdGUgdGhlIGVsZW1lbnQgb24gdGhlIG9wZW5lZCBwYWdlIChkZWZhdWx0IHRvIEZPIGxvZ28pXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxQYWdlPn0gT3BlbmVkIHRhYiBhZnRlciB0aGUgY2xpY2tcbiAgICAgKi9cbiAgICBvcGVuTGlua1dpdGhUYXJnZXRCbGFuayhwYWdlLCBzZWxlY3RvciwgbmV3UGFnZVNlbGVjdG9yID0gJ2JvZHkgLmxvZ28nKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBbbmV3UGFnZV0gPSB5aWVsZCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgcGFnZS53YWl0Rm9yRXZlbnQoJ3BvcHVwJyksXG4gICAgICAgICAgICAgICAgcGFnZS5jbGljayhzZWxlY3RvcilcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgeWllbGQgbmV3UGFnZS53YWl0Rm9yTG9hZFN0YXRlKCduZXR3b3JraWRsZScpO1xuICAgICAgICAgICAgeWllbGQgdGhpcy53YWl0Rm9yVmlzaWJsZVNlbGVjdG9yKG5ld1BhZ2UsIG5ld1BhZ2VTZWxlY3Rvcik7XG4gICAgICAgICAgICByZXR1cm4gbmV3UGFnZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdhaXQgZm9yIHNlbGVjdG9yIGFuZCBjbGlja1xuICAgICAqIEBwYXJhbSBwYWdlIHtQYWdlfSBCcm93c2VyIHRhYlxuICAgICAqIEBwYXJhbSBzZWxlY3RvciB7c3RyaW5nfSBTdHJpbmcgdG8gbG9jYXRlIHRoZSBlbGVtZW50IGZvciB0aGUgY2hlY2tcbiAgICAgKiBAcGFyYW0gdGltZW91dCB7bnVtYmVyfSBUaW1lIHRvIHdhaXQgb24gbWlsbGlzZWNvbmRzIGJlZm9yZSB0aHJvd2luZyBhbiBlcnJvclxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgd2FpdEZvclNlbGVjdG9yQW5kQ2xpY2socGFnZSwgc2VsZWN0b3IsIHRpbWVvdXQgPSA1MDAwKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLndhaXRGb3JWaXNpYmxlU2VsZWN0b3IocGFnZSwgc2VsZWN0b3IsIHRpbWVvdXQpO1xuICAgICAgICAgICAgeWllbGQgcGFnZS5jbGljayhzZWxlY3Rvcik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWxvYWQgYWN0dWFsIGJyb3dzZXIgcGFnZVxuICAgICAqIEBwYXJhbSBwYWdlIHtQYWdlfSBCcm93c2VyIHRhYlxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgcmVsb2FkUGFnZShwYWdlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCBwYWdlLnJlbG9hZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIHRoZSBleGlzdGluZyB0ZXh0IGZyb20gaW5wdXQgdGhlbiBzZXQgYSB2YWx1ZVxuICAgICAqIEBwYXJhbSBwYWdlIHtQYWdlfSBCcm93c2VyIHRhYlxuICAgICAqIEBwYXJhbSBzZWxlY3RvciB7c3RyaW5nfSBTdHJpbmcgdG8gbG9jYXRlIHRoZSBpbnB1dCB0byBzZXQgaXRzIHZhbHVlXG4gICAgICogQHBhcmFtIHZhbHVlIHs/c3RyaW5nfG51bWJlcn0gVmFsdWUgdG8gc2V0IG9uIHRoZSBpbnB1dFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgc2V0VmFsdWUocGFnZSwgc2VsZWN0b3IsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCBwYWdlLmZpbGwoc2VsZWN0b3IsIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSB0ZXh0IGZyb20gaW5wdXRcbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3Ige3N0cmluZ30gU3RyaW5nIHRvIGxvY2F0ZSB0aGUgZWxlbWVudCBmb3IgdGhlIGRlbGV0aW9uXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgZGVsZXRlVGV4dEZyb21JbnB1dChwYWdlLCBzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgdGhpcy53YWl0Rm9yU2VsZWN0b3JBbmRDbGljayhwYWdlLCBzZWxlY3Rvcik7XG4gICAgICAgICAgICB5aWVsZCBwYWdlLmNsaWNrKHNlbGVjdG9yLCB7IGNsaWNrQ291bnQ6IDMgfSk7XG4gICAgICAgICAgICAvLyBEZWxldGUgdGV4dCBmcm9tIGlucHV0IGJlZm9yZSB0eXBpbmdcbiAgICAgICAgICAgIHlpZWxkIHBhZ2Uud2FpdEZvclRpbWVvdXQoMTAwKTtcbiAgICAgICAgICAgIHlpZWxkIHBhZ2UucHJlc3Moc2VsZWN0b3IsICdEZWxldGUnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRvIGFjY2VwdCBvciBkaXNtaXNzIGEgamF2YXNjcmlwdCBkaWFsb2dcbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gYWNjZXB0IHtib29sZWFufSBUcnVlIHRvIGFjY2VwdCB0aGUgZGlhbG9nLCBmYWxzZSB0byBkaXNtaXNzXG4gICAgICogQHBhcmFtIHRleHQge3N0cmluZ30gVGV4dCB0byBzZXQgb24gZGlhbG9nIGlucHV0XG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgZGlhbG9nTGlzdGVuZXIocGFnZSwgYWNjZXB0LCB0ZXh0KSB7XG4gICAgICAgIHBhZ2Uub25jZSgnZGlhbG9nJywgKGRpYWxvZykgPT4ge1xuICAgICAgICAgICAgaWYgKGFjY2VwdCkge1xuICAgICAgICAgICAgICAgIGlmICh0ZXh0ICE9PSAnJylcbiAgICAgICAgICAgICAgICAgICAgdm9pZCBkaWFsb2cuYWNjZXB0KHRleHQpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdm9pZCBkaWFsb2cuYWNjZXB0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2b2lkIGRpYWxvZy5kaXNtaXNzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZSBhY3R1YWwgdGFiIGFuZCBnb3RvIGFub3RoZXIgdGFiIGlmIHdhbnRlZFxuICAgICAqIEBwYXJhbSBicm93c2VyQ29udGV4dCB7QnJvd3NlckNvbnRleHR9IENvbnRleHQgb2YgdGhlIHBhZ2VcbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gdGFiSWQge251bWJlcn0gVGFiIHRvIGdldCBmb2N1cyBvbiBhZnRlciBjbG9zaW5nIHRoZSBvdGhlciB0YWJcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPFBhZ2V8bnVsbD59XG4gICAgICovXG4gICAgY2xvc2VQYWdlKGJyb3dzZXJDb250ZXh0LCBwYWdlLCB0YWJJZCA9IC0xKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCBwYWdlLmNsb3NlKCk7XG4gICAgICAgICAgICBpZiAodGFiSWQgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXJDb250ZXh0LnBhZ2VzKClbdGFiSWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY3JvbGwgdG8gZWxlbWVudFxuICAgICAqIEBwYXJhbSBwYWdlIHtQYWdlfSBCcm93c2VyIHRhYlxuICAgICAqIEBwYXJhbSBzZWxlY3RvciB7c3RyaW5nfSBTdHJpbmcgdG8gbG9jYXRlIHRoZSBlbGVtZW50IHRvIHNjcm9sbCB0b1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgc2Nyb2xsVG8ocGFnZSwgc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHBhZ2UuJGV2YWwoc2VsZWN0b3IsIChlbCkgPT4gZWwuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWxlY3Qgb3B0aW9uIGluIHNlbGVjdCBieSB2aXNpYmxlIHRleHRcbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3Ige3N0cmluZ30gU3RyaW5nIHRvIGxvY2F0ZSB0aGUgc2VsZWN0XG4gICAgICogQHBhcmFtIHRleHRWYWx1ZSB7c3RyaW5nfG51bWJlcn0gVmFsdWUgdG8gc2VsZWN0XG4gICAgICogQHBhcmFtIGZvcmNlIHtib29sZWFufSBGb3JjaW5nIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0XG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgc2VsZWN0QnlWaXNpYmxlVGV4dChwYWdlLCBzZWxlY3RvciwgdGV4dFZhbHVlLCBmb3JjZSA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCBwYWdlLnNlbGVjdE9wdGlvbihzZWxlY3RvciwgeyBsYWJlbDogdGV4dFZhbHVlLnRvU3RyaW5nKCkgfSwgeyBmb3JjZSB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRvIGdldCBhIG51bWJlciBmcm9tIHRleHRcbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3Ige3N0cmluZ30gU3RyaW5nIHRvIGxvY2F0ZSB0aGUgZWxlbWVudFxuICAgICAqIEBwYXJhbSB0aW1lb3V0IHtudW1iZXJ9IFRpbWUgdG8gd2FpdCBvbiBtaWxsaXNlY29uZHMgYmVmb3JlIHRocm93aW5nIGFuIGVycm9yXG4gICAgICogQHJldHVybnMge1Byb21pc2U8bnVtYmVyPn1cbiAgICAgKi9cbiAgICBnZXROdW1iZXJGcm9tVGV4dChwYWdlLCBzZWxlY3RvciwgdGltZW91dCA9IDApIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHBhZ2Uud2FpdEZvclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0geWllbGQgdGhpcy5nZXRUZXh0Q29udGVudChwYWdlLCBzZWxlY3Rvcik7XG4gICAgICAgICAgICBjb25zdCBudW1iZXIgPSAvXFxkKy9nLmV4ZWModGV4dCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChudW1iZXIsIDEwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdvIHRvIFBhZ2UgYW5kIHdhaXQgZm9yIG5hdmlnYXRpb25cbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3Ige3N0cmluZ30gU3RyaW5nIHRvIGxvY2F0ZSB0aGUgZWxlbWVudFxuICAgICAqIEBwYXJhbSB3YWl0VW50aWwge30gVGhlIGV2ZW50IHRvIHdhaXQgYWZ0ZXIgY2xpY2tcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIGNsaWNrQW5kV2FpdEZvck5hdmlnYXRpb24ocGFnZSwgc2VsZWN0b3IsIHdhaXRVbnRpbCA9ICduZXR3b3JraWRsZScpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICBwYWdlLndhaXRGb3JOYXZpZ2F0aW9uKHsgd2FpdFVudGlsIH0pLFxuICAgICAgICAgICAgICAgIHBhZ2UuY2xpY2soc2VsZWN0b3IpXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5hdmlnYXRlIHRvIHRoZSBwcmV2aW91cyBwYWdlIGluIGhpc3RvcnlcbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gd2FpdFVudGlsIHsnbmV0d29ya2lkbGUnIHwgJ2xvYWQnIHwgJ2RvbWNvbnRlbnRsb2FkZWQnIHwgdW5kZWZpbmVkfSBUaGUgZXZlbnQgdG8gd2FpdCBhZnRlciBvbiBuYXZpZ2F0aW9uXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICAgKi9cbiAgICBnb1RvUHJldmlvdXNQYWdlKHBhZ2UsIHdhaXRVbnRpbCA9ICdsb2FkJykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgcGFnZS5nb0JhY2soeyB3YWl0VW50aWwgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBjaGVja2JveCBpcyBzZWxlY3RlZFxuICAgICAqIEBwYXJhbSBwYWdlIHtQYWdlfSBCcm93c2VyIHRhYlxuICAgICAqIEBwYXJhbSBzZWxlY3RvciB7c3RyaW5nfSBTdHJpbmcgdG8gbG9jYXRlIHRoZSBjaGVja2JveFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59XG4gICAgICovXG4gICAgaXNDaGVja2JveFNlbGVjdGVkKHBhZ2UsIHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFnZS5pc0NoZWNrZWQoc2VsZWN0b3IpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VsZWN0LCB1bnNlbGVjdCBjaGVja2JveFxuICAgICAqIEBwYXJhbSBwYWdlIHtQYWdlfSBCcm93c2VyIHRhYlxuICAgICAqIEBwYXJhbSBjaGVja2JveFNlbGVjdG9yIHtzdHJpbmd9IFN0cmluZyB0byBsb2NhdGUgdGhlIGNoZWNrYm94XG4gICAgICogQHBhcmFtIHZhbHVlV2FudGVkIHtib29sZWFufSBWYWx1ZSB3YW50ZWQgb24gdGhlIHNlbGVjdG9yXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICAgKi9cbiAgICBjaGFuZ2VDaGVja2JveFZhbHVlKHBhZ2UsIGNoZWNrYm94U2VsZWN0b3IsIHZhbHVlV2FudGVkID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKHZhbHVlV2FudGVkKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgcGFnZS5jaGVjayhjaGVja2JveFNlbGVjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHlpZWxkIHBhZ2UudW5jaGVjayhjaGVja2JveFNlbGVjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERyYWcgYW5kIGRyb3AgZWxlbWVudFxuICAgICAqIEBwYXJhbSBwYWdlIHtQYWdlfSBCcm93c2VyIHRhYlxuICAgICAqIEBwYXJhbSBzb3VyY2Uge3N0cmluZ30gU3RyaW5nIHRvIGxvY2F0ZSB0aGUgZWxlbWVudCB0byBkcmFnXG4gICAgICogQHBhcmFtIHRhcmdldCB7c3RyaW5nfSBTdHJpbmcgdG8gbG9jYXRlIHRoZSBlbGVtZW50IHdoZXJlIHRvIGRyb3BcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIGRyYWdBbmREcm9wKHBhZ2UsIHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCBwYWdlLmRyYWdBbmREcm9wKHNvdXJjZSwgdGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwbG9hZCBmaWxlIGluIGlucHV0IHR5cGU9ZmlsZSBzZWxlY3RvclxuICAgICAqIEBwYXJhbSBwYWdlIHtQYWdlfSBCcm93c2VyIHRhYlxuICAgICAqIEBwYXJhbSBzZWxlY3RvciB7c3RyaW5nfSBTdHJpbmcgdG8gbG9jYXRlIHRoZSBmaWxlIGlucHV0XG4gICAgICogQHBhcmFtIGZpbGVQYXRoIHtzdHJpbmd9IFBhdGggb2YgdGhlIGZpbGUgdG8gYWRkXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICAgKi9cbiAgICB1cGxvYWRGaWxlKHBhZ2UsIHNlbGVjdG9yLCBmaWxlUGF0aCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgaW5wdXQgPSB5aWVsZCBwYWdlLiQoc2VsZWN0b3IpO1xuICAgICAgICAgICAgeWllbGQgaW5wdXQuc2V0SW5wdXRGaWxlcyhmaWxlUGF0aCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGxvYWQgZmlsZSB1c2luZyBmaWxlIGNob29zZXJcbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3Ige3N0cmluZ30gU3RyaW5nIHRvIGxvY2F0ZSB0aGUgZmlsZSBjaG9vc2VyXG4gICAgICogQHBhcmFtIGZpbGVQYXRoIHtBcnJheTxzdHJpbmc+fSBQYXRoIG9mIHRoZSBmaWxlIHRvIGFkZFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIHVwbG9hZE9uRmlsZUNob29zZXIocGFnZSwgc2VsZWN0b3IsIGZpbGVQYXRoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyBTZXQgdmFsdWUgd2hlbiBmaWxlQ2hvb3NlciBpcyBvcGVuXG4gICAgICAgICAgICBwYWdlLm9uY2UoJ2ZpbGVjaG9vc2VyJywgKGZpbGVDaG9vc2VyKSA9PiB7XG4gICAgICAgICAgICAgICAgdm9pZCBmaWxlQ2hvb3Nlci5zZXRGaWxlcyhmaWxlUGF0aCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHlpZWxkIHBhZ2UuY2xpY2soc2VsZWN0b3IpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHBhcmVudCBlbGVtZW50IGZyb20gc2VsZWN0b3JcbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3Ige3N0cmluZ30gU3RyaW5nIHRvIGxvY2F0ZSB0aGUgY2hpbGQgZWxlbWVudFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8RWxlbWVudEhhbmRsZT59XG4gICAgICovXG4gICAgZ2V0UGFyZW50RWxlbWVudChwYWdlLCBzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gcGFnZS5ldmFsdWF0ZUhhbmRsZSgoc2wpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2wpLnBhcmVudEVsZW1lbnQsIHNlbGVjdG9yKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xpY2sgb24gc2VsZWN0b3IgYW5kIHdhaXQgZm9yIGRvd25sb2FkIGV2ZW50XG4gICAgICogQHBhcmFtIHBhZ2Uge1BhZ2V9IEJyb3dzZXIgdGFiXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIHtzdHJpbmd9IFNlbGVjdG9yIHRvIGNsaWNrIG9uXG4gICAgICogQHBhcmFtIHRhcmdldEJsYW5rIHtib29sZWFufSBMaW5rIGhhcyBhdHRyaWJ1dGUgdGFyZ2V0PWJsYW5rXG4gICAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nfG51bGw+fVxuICAgICAqL1xuICAgIGNsaWNrQW5kV2FpdEZvckRvd25sb2FkKHBhZ2UsIHNlbGVjdG9yLCB0YXJnZXRCbGFuayA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyBEZWxldGUgdGhlIHRhcmdldCBiZWNhdXNlIGEgbmV3IHRhYiBpcyBvcGVuZWQgd2hlbiBkb3dubG9hZGluZyB0aGUgZmlsZVxuICAgICAgICAgICAgaWYgKHRhcmdldEJsYW5rKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgcGFnZS4kZXZhbChzZWxlY3RvciwgKGVsKSA9PiAoZWwudGFyZ2V0ID0gJycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IFtkb3dubG9hZF0gPSB5aWVsZCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgcGFnZS53YWl0Rm9yRXZlbnQoJ2Rvd25sb2FkJyksXG4gICAgICAgICAgICAgICAgcGFnZS5jbGljayhzZWxlY3RvcilcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcmV0dXJuIGRvd25sb2FkLnBhdGgoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBib3VuZGluZyByZWN0XG4gICAgICogQHBhcmFtIHBhZ2Uge1BhZ2V9IEJyb3dzZXIgdGFiXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIHtzdHJpbmd9IFNlbGVjdG9yIHRvIGdldCBib3VuZGluZyByZWN0IGZyb21cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxET01SZWN0fHVuZGVmaW5lZD59XG4gICAgICovXG4gICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhZ2UsIHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBwYWdlLmV2YWx1YXRlKChzbCkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNsKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvSlNPTigpOyB9LCBzZWxlY3Rvcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBkb2N1bWVudCBjbGllbnQgc2l6ZVxuICAgICAqIEBwYXJhbSBwYWdlIHtQYWdlfSBCcm93c2VyIHRhYlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHsgdnc6IG51bWJlcjsgdmg6IG51bWJlciB9Pn1cbiAgICAgKi9cbiAgICBnZXREb2N1bWVudENsaWVudFNpemUocGFnZSkge1xuICAgICAgICByZXR1cm4gcGFnZS5ldmFsdWF0ZSgoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZ3OiBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggfHwgMCwgd2luZG93LmlubmVyV2lkdGggfHwgMCksXG4gICAgICAgICAgICAgICAgdmg6IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgfHwgMCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYW4gZWxlbWVudCBpcyB2aXNpYmxlIGluIHZpZXdwb3J0IGFmdGVyIGEgcGFnZSBzY3JvbGxcbiAgICAgKiBAcGFyYW0gcGFnZSB7UGFnZX0gQnJvd3NlciB0YWJcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3Ige3N0cmluZ30gU2VsZWN0b3IgdG8gY2hlY2sgdmlzaWJpbGl0eVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBUcnVlIGlmIHNlbGVjdG9yIHZpc2libGUgaW4gdmlld3BvcnQgYW5kIEZhbHNlIGlmIG5vdFxuICAgICAqL1xuICAgIGlzRWxlbWVudFZpc2libGVBZnRlclNjcm9sbChwYWdlLCBzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcmVjdCA9IHlpZWxkIHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhZ2UsIHNlbGVjdG9yKTtcbiAgICAgICAgICAgIGlmIChyZWN0LnRvcCA+PSAwICYmIHJlY3QubGVmdCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZG9jdW1lbnRTaXplID0geWllbGQgdGhpcy5nZXREb2N1bWVudENsaWVudFNpemUocGFnZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY3QucmlnaHQgPD0gZG9jdW1lbnRTaXplLnZ3ICYmIHJlY3QuYm90dG9tIDw9IGRvY3VtZW50U2l6ZS52aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5Db21tb25QYWdlID0gQ29tbW9uUGFnZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImRvdGVudlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJtb2R1bGUtYWxpYXMvcmVnaXN0ZXJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibXlzcWwyL3Byb21pc2VcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicGxheXdyaWdodFwiKTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvaW5kZXgudHNcIik7XG4iXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwidGhpcyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fc2V0TW9kdWxlRGVmYXVsdCIsInYiLCJ2YWx1ZSIsIl9faW1wb3J0U3RhciIsIm1vZCIsInJlc3VsdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwicGxheXdyaWdodF8xIiwiZXhwb3J0cyIsImJyb3dzZXJIZWxwZXIiLCJkZWxldGVSb3V0ZSIsImFkZFJvdXRlIiwiYWRkSW5pdFNjcmlwdCIsImdldFRhYiIsImNsb3NlVGFiIiwiYWRkVGFiIiwiZ2V0QnJvd3NlckNvbnRleHQiLCJjbG9zZUNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiY2xvc2VCcm93c2VyIiwiY3JlYXRlQnJvd3NlciIsImdsb2JhbFZhcnNfMSIsInBsYXl3cmlnaHQiLCJjaHJvbWl1bSIsImZpcmVmb3giLCJ3ZWJraXQiLCJicm93c2VyT3B0aW9ucyIsIkdsb2JhbFZhcnMiLCJnZXRCcm93c2VyT3B0aW9ucyIsImxldCIsImF0dGVtcHQiLCJicm93c2VyIiwibmFtZSIsImxhdW5jaCIsIkVycm9yIiwibWVzc2FnZSIsInNldFRpbWVvdXQiLCJjbG9zZSIsImNvbnRleHRPcHRpb25zIiwiZ2V0QnJvd3NlckNvbnRleHRPcHRpb25zIiwibmV3Q29udGV4dCIsImNvbnRleHQiLCJwb3NpdGlvbiIsImNvbnRleHRzIiwibGVuZ3RoIiwibmV3UGFnZSIsInRhYiIsInRhYnMiLCJwYWdlcyIsImJyb3dzZXJFbGVtZW50IiwidXJsIiwiaGFuZGxlciIsInJvdXRlIiwidW5yb3V0ZSIsInNjcmlwdCIsImFyZ3MiLCJkYkhlbHBlciIsInByb21pc2VfMSIsImNyZWF0ZVBvb2wiLCJkYiIsImV4ZWN1dGVRdWVyeSIsInF1ZXJ5IiwiY29ubmVjdGlvbiIsInJlc3VsdHMiLCJleGVjdXRlIiwiZGVzdHJveUNvbm5lY3Rpb24iLCJnZXRRdWVyeVJlc3VsdHMiLCJjcmVhdGVDdXN0b21TZWxlY3RRdWVyeSIsInRhYmxlIiwiZmllbGRzIiwiY29uZGl0aW9ucyIsImN1c3RvbUZpZWxkcyIsImpvaW4iLCJnZXRSZXN1bHRzQ3VzdG9tU2VsZWN0UXVlcnkiLCJnZXRRdWVyeUZpZWxkcyIsImVuZCIsImRvdGVudl8xIiwiY29uZmlnIiwicGF0aCIsInBsYXRmb3Jtc0xpc3QiLCJpbmNsdWRlcyIsInBsYXRmb3JtIiwiYnJvd3NlcnNMaXN0IiwiYXNzaWduIiwib3B0aW9ucyIsImNocm9taXVtU2FuZGJveCIsInB1c2giLCJicm93c2VyQ29udGV4dCIsImRldmljZSIsImRldmljZXMiLCJfYSIsInByb2Nlc3MiLCJlbnYiLCJQTEFURk9STSIsIl9iIiwiQlJPV1NFUiIsImhlYWRsZXNzIiwiSEVBRExFU1MiLCJ0aW1lb3V0Iiwic2xvd01vIiwicGFyc2VJbnQiLCJfYyIsIlNMT1dfTU8iLCJhY2NlcHREb3dubG9hZHMiLCJfZCIsIkFDQ0VQVF9ET1dOTE9BRFMiLCJ2aWV3cG9ydCIsIndpZHRoIiwiX2UiLCJXSURUSCIsImhlaWdodCIsIl9mIiwiSEVJR0hUIiwibG9jYWxlIiwiX2ciLCJMT0NBTEUiLCJodHRwQ3JlZGVudGlhbHMiLCJ1c2VybmFtZSIsIl9oIiwiSFRUUF9DUkVEX1VTRVJOQU1FIiwicGFzc3dvcmQiLCJfaiIsIkhUVFBfQ1JFRF9QQVNTV09SRCIsIkRFVklDRSIsIlVSTCIsImhvc3QiLCJfayIsIkRCX0hPU1QiLCJ1c2VyIiwiX2wiLCJEQl9VU0VSIiwiX20iLCJEQl9QQVNTV09SRCIsImRhdGFiYXNlIiwiX28iLCJEQl9OQU1FIiwic2NyZWVuc2hvdHMiLCJhY3RpdmUiLCJfcCIsIlNDUkVFTlNIT1RTX09OIiwiZm9sZGVyIiwiX3EiLCJTQ1JFRU5TSE9UU19GT0xERVIiLCJtb2NoYUhvb2tzIiwiQ29tbW9uUGFnZSIsImRiSGVscGVyXzEiLCJicm93c2VySGVscGVyXzEiLCJjb21tb25QYWdlXzEiLCJzZXR1cF8xIiwiZmFpbFBvc2l0aW9uIiwiYmVmb3JlQWxsIiwiYWZ0ZXJFYWNoIiwiY3VycmVudFRlc3QiLCJzdGF0ZSIsInBhZ2UiLCJzY3JlZW5zaG90IiwiZnVsbFBhZ2UiLCJhZnRlckFsbCIsImdldFBhZ2VUaXRsZSIsInRpdGxlIiwiZ29UbyIsIndhaXRVbnRpbCIsImdvdG8iLCJnZXRDdXJyZW50VVJMIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwid2FpdEZvclRpbWVvdXQiLCJ3YWl0Rm9yU2VsZWN0b3IiLCJzZWxlY3RvciIsIndhaXRGb3JWaXNpYmxlU2VsZWN0b3IiLCJ3YWl0Rm9ySGlkZGVuU2VsZWN0b3IiLCJ3YWl0Rm9yQXR0YWNoZWRTZWxlY3RvciIsIndhaXRGb3JEZXRhY2hlZFNlbGVjdG9yIiwiZ2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsIiRldmFsIiwiZWwiLCJyZXBsYWNlIiwidHJpbSIsImdldEF0dHJpYnV0ZUNvbnRlbnQiLCJhdHRyaWJ1dGUiLCJhdHRyIiwiZ2V0QXR0cmlidXRlIiwiZWxlbWVudFZpc2libGUiLCJlcnJvciIsImVsZW1lbnROb3RWaXNpYmxlIiwib3BlbkxpbmtXaXRoVGFyZ2V0QmxhbmsiLCJuZXdQYWdlU2VsZWN0b3IiLCJhbGwiLCJ3YWl0Rm9yRXZlbnQiLCJjbGljayIsIndhaXRGb3JMb2FkU3RhdGUiLCJ3YWl0Rm9yU2VsZWN0b3JBbmRDbGljayIsInJlbG9hZFBhZ2UiLCJyZWxvYWQiLCJzZXRWYWx1ZSIsImZpbGwiLCJkZWxldGVUZXh0RnJvbUlucHV0IiwiY2xpY2tDb3VudCIsInByZXNzIiwiZGlhbG9nTGlzdGVuZXIiLCJhY2NlcHQiLCJ0ZXh0Iiwib25jZSIsImRpYWxvZyIsImRpc21pc3MiLCJjbG9zZVBhZ2UiLCJ0YWJJZCIsInNjcm9sbFRvIiwic2Nyb2xsSW50b1ZpZXciLCJzZWxlY3RCeVZpc2libGVUZXh0IiwidGV4dFZhbHVlIiwiZm9yY2UiLCJzZWxlY3RPcHRpb24iLCJsYWJlbCIsInRvU3RyaW5nIiwiZ2V0TnVtYmVyRnJvbVRleHQiLCJudW1iZXIiLCJleGVjIiwiY2xpY2tBbmRXYWl0Rm9yTmF2aWdhdGlvbiIsIndhaXRGb3JOYXZpZ2F0aW9uIiwiZ29Ub1ByZXZpb3VzUGFnZSIsImdvQmFjayIsImlzQ2hlY2tib3hTZWxlY3RlZCIsImlzQ2hlY2tlZCIsImNoYW5nZUNoZWNrYm94VmFsdWUiLCJjaGVja2JveFNlbGVjdG9yIiwidmFsdWVXYW50ZWQiLCJjaGVjayIsInVuY2hlY2siLCJkcmFnQW5kRHJvcCIsInNvdXJjZSIsInRhcmdldCIsInVwbG9hZEZpbGUiLCJmaWxlUGF0aCIsImlucHV0IiwiJCIsInNldElucHV0RmlsZXMiLCJ1cGxvYWRPbkZpbGVDaG9vc2VyIiwiZmlsZUNob29zZXIiLCJzZXRGaWxlcyIsImdldFBhcmVudEVsZW1lbnQiLCJldmFsdWF0ZUhhbmRsZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInNsIiwicGFyZW50RWxlbWVudCIsImNsaWNrQW5kV2FpdEZvckRvd25sb2FkIiwidGFyZ2V0QmxhbmsiLCJkb3dubG9hZCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImV2YWx1YXRlIiwidG9KU09OIiwiZ2V0RG9jdW1lbnRDbGllbnRTaXplIiwidnciLCJNYXRoIiwibWF4IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwidmgiLCJjbGllbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsImlzRWxlbWVudFZpc2libGVBZnRlclNjcm9sbCIsImRvY3VtZW50U2l6ZSIsInJlY3QiLCJ0b3AiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJtb2R1bGUiLCJyZXF1aXJlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyJdLCJzb3VyY2VSb290IjoiIn0=